    public JSONElement parse(Reader r) {
        jsonStateStack.add(jsonState);

        String currentValue = "";
        StringBuilder stringBuilder = new StringBuilder();

        Character symbol = readSymbol(r);
        while(!jsonState.equals(END_OF_STREAM)){
            JSONEvent ev = new JSONEvent();
            String event = ev.checkEvent(symbol);

            //currentValue = readJSONValue(r);
            /*
            if (event.equals(ev.READING_VALUE)){
                jsonState = COMPILING_VALUE;
            }else{
                jsonState = VALUE_HAS_BEEN_READ;
            }*/

            updateState(event);

            currentValue = readValue(stringBuilder, ev.getValue());

            /*
            if (jsonState.equals(COMPILING_VALUE)){
                stringBuilder.append(ev.getValue());
            }

            if(jsonState.equals(VALUE_HAS_BEEN_READ)){
                currentValue = stringBuilder.toString();
                System.out.println(currentValue);
                stringBuilder = new StringBuilder();
            }*/

            if (jsonState.equals(READING_ARRAY)){

            }
            //System.out.println(jsonState + " : " + event);
            System.out.println(currentValue);
            symbol = readSymbol(r);
        }

        jsonStateStack.add(jsonState);

        for (String s:jsonStateStack){
            System.out.println(s);
        }

        //JSONString = read(r);
        //JSONArray array = readAsArray(r);
        //JSONElementClass element = new JSONElementClass(array);

        //return element;
        return null;
    }



    private String eliminateBrackets(String string) {
        String regex = "\\[([^]]+)\\]";
        Matcher m = Pattern.compile(regex).matcher(string);
        while (m.find()) {
            return m.group(1);
        }
        return "not array";
    }

        public JSONElement parse(Reader r) {
            JSONArray jsonArray = new JSONArrayClass();
            JSONObject jsonObject = new JSONObjectClass();
            JSONPrimitive jsonPrimitive = null;

            Boolean itsObject = false;
            Boolean itsPrimitive = false;

            jsonState = WAITING_FOR_INPUT;
            jsonStateStack = new ArrayList<>();
            jsonStateStack.add(jsonState);

            String currentValue = "";
            List<String> values = new ArrayList<>();

            while(!jsonState.equals(END_OF_STREAM)){
                //currentValue = readStream(r);
                values.add(readStream(r));
                currentValue = values.get(values.size()-1);

                if (currentValue.equals("")){
                    continue;
                }
                jsonState = READING_ARRAY;
                if (jsonState.equals(READING_ARRAY)){

                    JSONPrimitiveClass p = new JSONPrimitiveClass(currentValue);
                    JSONElementClass el = new JSONElementClass(p);
                    jsonArray.add(el);
                }

                if (jsonState.equals(READING_JSON_PROPERTY)){
                    itsObject = true;
                    String propName = values.get(values.size()-2);
                    jsonObject.addProperty(propName, currentValue);
                }

                if(jsonStateStack.get(jsonStateStack.size() - 1).equals(READING_PRIMITIVE)){
                    itsPrimitive = true;
                    jsonPrimitive = new JSONPrimitiveClass(currentValue);

                }
                System.out.println(currentValue + " : " + jsonStateStack.get(jsonStateStack.size() - 1));
                //System.out.println(currentValue + " : " + jsonState);
            }

            jsonStateStack.add(jsonState);

            for (String s:jsonStateStack){
                System.out.println(s);
            }

            JSONElementClass element = null;
            element = new JSONElementClass(jsonArray);

            return element;
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package ru.dkom.jsonParser;

import ru.nojs.json.*;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class ImplementedJsonParser implements StreamingJsonParser {
    private final static String WAITING_FOR_INPUT = "WAITING_FOR_INPUT";
    private final static String COMPILING_VALUE = "COMPILING_VALUE";
    private final static String VALUE_HAS_BEEN_READ = "VALUE_HAS_BEEN_READ";
    private final static String READING_ARRAY = "READING_ARRAY";
    private final static String ARRAY_HAS_BEEN_READ = "ARRAY_HAS_BEEN_READ";
    private final static String END_OF_STREAM = "END_OF_STREAM";

    private final static String READING_PRIMITIVE = "READING_PRIMITIVE";

    private final static String READING_JSON_PROPERTY = "READING_JSON_PROPERTY";

    private String jsonState;
    //private List<String> jsonStateStack;

    private JSONStateStack jsonStateStack;

    public String readStream(Reader r){

        String currentValue = "";
        StringBuilder stringBuilder = new StringBuilder();
        Character symbol = null;

        JSONEvent event = new JSONEvent();
        String evDescriptor = new String();

        while (true){
            symbol = readSymbol(r);

            if (jsonState.equals(END_OF_STREAM)){
                currentValue = stringBuilder.toString();
                break;
            }
            evDescriptor = event.checkEvent(symbol);

            if (evDescriptor.equals(JSONEvent.INSIGNIFICANT_SYMBOL)){
                continue;
            }

            //System.out.println(evDescriptor);
            updateState(evDescriptor);

            if (event.getValue().equals("")){
                //updateState(evDescriptor);

                if (evDescriptor.equals(JSONEvent.QUOTES_DETECTED)){
                    stringBuilder.append("\"");
                    continue;
                }

                if (stringBuilder.length() == 0){
                    continue;
                }
                currentValue = stringBuilder.toString();
                stringBuilder = new StringBuilder();
                //updateState(evDescriptor);
                break;
            }else{
                stringBuilder.append(symbol);
            }
        }
        return currentValue;
    }

    @Override
    public JSONElement parse(Reader r) {
        JSONArray jsonArray = new JSONArrayClass();
        JSONObject jsonObject = new JSONObjectClass();
        JSONPrimitive jsonPrimitive = null;

        Boolean itsObject = false;
        Boolean itsPrimitive = false;

        jsonState = WAITING_FOR_INPUT;
        //jsonStateStack = new ArrayList<>();
        // jsonStateStack.add(jsonState);
        jsonStateStack = new JSONStateStack();
        jsonStateStack.push(jsonState);

        String currentValue = "";
        List<String> values = new ArrayList<>();

        while(!jsonState.equals(END_OF_STREAM)){
            //currentValue = readStream(r);
            values.add(readStream(r));
            currentValue = values.get(values.size()-1);

            if (currentValue.equals("")){
                continue;
            }

            //jsonState = jsonStateStack.get(jsonStateStack.size()-1);
            //jsonState = jsonStateStack.pop();
            //System.out.println(jsonState);

            jsonState = jsonStateStack.readLast();
            if (jsonState.equals(READING_ARRAY)){
                JSONPrimitiveClass p = new JSONPrimitiveClass(currentValue);
                JSONElementClass el = new JSONElementClass(p);
                jsonArray.add(el);
            }

            if (jsonState.equals(ARRAY_HAS_BEEN_READ)){
                JSONPrimitiveClass p = new JSONPrimitiveClass(currentValue);
                JSONElementClass el = new JSONElementClass(p);
                jsonArray.add(el);
                jsonStateStack.push(WAITING_FOR_INPUT);
            }

            if (jsonState.equals(READING_JSON_PROPERTY)){
                itsObject = true;
                String propName = values.get(values.size()-2);
                jsonObject.addProperty(propName, currentValue);
            }

            if(jsonState.equals(READING_PRIMITIVE)){
            //if(jsonStateStack.get(jsonStateStack.size() - 1).equals(READING_PRIMITIVE)){
                itsPrimitive = true;
                jsonPrimitive = new JSONPrimitiveClass(currentValue);


            }
            //System.out.println(currentValue + " : " + jsonStateStack.get(jsonStateStack.size() - 1));
            System.out.println(currentValue + " : " + jsonStateStack.readLast());
            //System.out.println(currentValue + " : " + jsonState);
        }

        //jsonStateStack.add(jsonState);
        jsonStateStack.push(jsonState);

        //for (String s:jsonStateStack){
            //System.out.println(s);
        //}

        JSONElementClass element = null;
        element = new JSONElementClass(jsonArray);

        System.out.println(jsonStateStack.toString());

        return element;
    }


    private void updateState(String event){
        jsonState = COMPILING_VALUE;

        //primitive detection
        if(event.equals(JSONEvent.READING_VALUE)){
            jsonState = READING_PRIMITIVE;
            //if(!jsonStateStack.get(jsonStateStack.size()-1).equals(READING_PRIMITIVE)){
                //jsonStateStack.add(jsonState);
            jsonStateStack.push(jsonState);
            //}
        }

        if (event.equals(JSONEvent.JSON_ARRAY_START)){
            jsonState = READING_ARRAY;
            //jsonStateStack.add(jsonState);
            jsonStateStack.push(jsonState);
        }

        if (event.equals(JSONEvent.JSON_ARRAY_END)){
            jsonState = ARRAY_HAS_BEEN_READ;
            //jsonStateStack.add(ARRAY_HAS_BEEN_READ);
            jsonStateStack.push(jsonState);
        }

        if (event.equals(JSONEvent.JSON_OBJECT_SEPARATOR)){
            //jsonState = jsonStateStack.get(jsonStateStack.size()-1);
            jsonState = jsonStateStack.readLast();
            //jsonState = "OBJ_END";
            //jsonStateStack.push(jsonState);
        }

        if (event.equals(JSONEvent.JSON_PRIMITIVE_VALUE_START)){
            jsonState = READING_JSON_PROPERTY;
            // jsonStateStack.add(READING_JSON_PROPERTY);
            jsonStateStack.push(jsonState);
        }

    }

    public ImplementedJsonParser() {
        //jsonStateStack = new ArrayList<>();
        jsonState = WAITING_FOR_INPUT;
        jsonStateStack = new JSONStateStack();
    }

    private Character readSymbol(Reader r) {
        Character c = null;
        try {
            int code = r.read();
            c = (char)code;
            if (code == -1){
                jsonState = END_OF_STREAM;
                r.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        return c;
    }





    public static void main(String[] args) {
        ImplementedJsonParser sjp = new ImplementedJsonParser();
        String jsonArray = "[1,2,3,4,856]";
        JSONElement je = sjp.parse(new StringReader(jsonArray));

        JSONArray a = je.getAsJsonArray();

        int size = a.size();
        System.out.println(size);

        String str = "\"test\"";
        str = "test    ";
        str = "\t [\t\t\n\n\r    true , \r\t\n  false\r\t\n] \n";
        //JSONElement je = sjp.parse(new StringReader(str));
        //JSONArray a = je.getAsJsonArray();
        //je = sjp.parse(new StringReader(str));

        //String jsnobj = "{\"a\":1}";
        //je = sjp.parse(new StringReader(jsnobj));
    }


}
